# Welcome to the config file parser.

# Config files are extended JAXN documents,
# which in turn are extended JSON documents.

# Comments (and white-space) works the same as in JAXN.

# The config contains statements, each statement is one of:
#
# 1) A member (Think top-level JAXN object)
# 2) A delete statement
# 3) An include statement

# On the top level, statements (even if they are members)
# must not be separated with commas.

# Let's start with some members, remember that JAXN keys can not just
# be strings as in JSON, but also identifiers, the values can be any JAXN value:
foo: "Hello, world!"
bar: 42
baz: null
f00: true
f01: false
f02: [] # an empty JAXN array
f03: {} # an empty JAXN object
f04: $"Binary data" + $01.00.01 + $"Concatenation is, of course, also possible"
f05: "Also " + "for " + "strings!"

# Keys have an extended format which goes beyond JAXN.
# They may start with digits and/or contain minus signs,
# and they may contain multiple parts separated by dots.
foo.bar: ""
foo.0: ""
foo.1.ying-yang: ""

# Each part can also be a string, just like in JAXN
# (and with escaping, concatenation, etc. - even the empty string is allowed)
# but keep in mind that a sane config will not need this.
foo."Hello, world!": ""
foo."".0: "empty parts are allowed"
foo.".".0: "even a dot is allowed"

# BTW: The above last line is equivalent to the next one.
foo: { ".": { "0": "even a dot is allowed" } }

# All of this is, of course, recursively available.
foo: { bar.baz.0."": null, bar.foo: "Hello" }

# For consistency, you can even leave out the commas inside JAXN objects.
foo: {
  bar: "Hello"
  baz: "World"
}

# Expressions $(key) can reference (copy) other parts of the config.
bla: $(foo.bar)

# Expressions can be part of concatenations, either expression-only, with strings or with binary, but not mixed!
bla: "hello" + $(foo.bar) + "hallo"
bla2: $(hello) + $(foo.bar) + $42 + $(bla) + $"hallo"

# Also: Merge objects...
result: { foo: 1, bar: 2 } + {} + { baz: 3 } + $(foo.bar)
result: { foo: 1, bar: 2, baz: 3 } # assuming foo.bar is an empty object

# ...and concatenate arrays
result: [ "foo", 42 ] + [] + [ "begin", [], {}, "end" ] + $(foo.baz)
result: [ "foo", 42, "begin", [], {}, "end" ] # assuming foo.baz is an empty array

# Nesting expressions is possible.
bla: $(foo.bar.$(baz))

# The above expressions contain a key, thereby forming a reference, no whitespace around it is allowed.
# There are also functions which consist of a function name (an identifier) plus one or more arguments.
# Arguments are named by an identifier, separated by comma and may be arbitrary values.
foo: $(shell cmd:"Hallo", lang:"DE", warp:42, foo:$(surprise.a.reference))

# delete statements (the keyword is followed by a key)
delete foo
delete foo.bar
delete foo."".0."bar"+'baz'

# include another file (the keyword is followed by a string)
include "hello"
include "hello"+'world!.txt'

# note that delete (and include) are valid keys:
delete: "foo" # assigns the string "foo" to the key "delete"
delete "foo" # deletes the key "foo"
include: "hello"

# join an array of strings
result: $(join array: [ "foo", "bar", "baz" ], separator: ",")
# separator is optional, default: " "
# result: "foo,bar,baz"

# split a string
result: $(split string: "foo bar baz\n", separators: " ")
# separators is optional, default: " \n"
result: [ "foo", "bar", "baz" ]

# trim a string (also available: trimr, triml)
result: $(trim string: "   foo bar    \n", remove: " \n")
# remove is optional, default: " \n"
result: "foo bar"

# pad, padr, padl

# execute a shell command
result: $(shell command:"echo Hello", sh:"bash", stderr:"/dev/null")

# adapted example 1 from jsonnet
foo: {
  person1: {
    name: "Alice",
    welcome: "Hello " + $(..name) + "!"
  }
  person2: $(..person1) + { name: "Bob" }
}

# adapted example 2 from jsonnet
CCompiler: {
    cFlags: [],
    out: "a.out",
    cmd: $(printf format:"%s %s %s -o %s", args: [$(..compiler), $(join array:$(..cFlags)), $(join array:$(..files)), $(..out)])
}

# GCC specialization
Gcc: $(CCompiler) + { compiler: "gcc" }

# Another specialization
Clang: $(CCompiler) + { compiler: "clang" }

# Mixins - append flags
Opt: { cFlags: $(.) + ["-O3", "-DNDEBUG"] }
Dbg: { cFlags: $(.) + ["-g"] }

Output: {
    targets: [
        $(Gcc) + { files: ["a.c", "b.c"] },
        $(Clang) + { files: ["test.c"], out: "test" },
        $(Clang) + $(Opt) + { files: ["test2.c"], out: "test2" },
        $(Gcc) + $(Opt) + $(Dbg) + { files: ["foo.c", "bar.c"], out: "baz" },
    ],
}
